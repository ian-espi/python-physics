from visual import *

#Define the moon and Earth and pluto and their positions (pos),
#the size of the spheres (radius), and color
earth = sphere(pos=vector(0,0,0), radius=3*10**7, color = color.blue)
moon = sphere(pos=vector(3.84*10**8,0,0), radius=1*10**7, color = color.white)
pluto = sphere(pos=vector(8*10**8,0,0), radius=.7*10**7, color = color.yellow)

#Create a line showing where the Earth, the moon and pluto was
earthtrail = curve(color = color.blue)
moontrail = curve(color=color.white)
plutotrail = curve(color=color.yellow)

#Set the masses of the moon and Earth
moon.mass = 7.34*10**22 
earth.mass = 6*10**24 
pluto.mass = 1.30900*10**22

#Set the initial velocity of moon and Earth
moon.v = vector(0,1022,0)
earth.v = vector(0,-14.00782951,0)
pluto.v = vector(0,707.52,0) #find the v for pluto

#Define Gravitational constant (G) and how many seconds in one step of code (dt)
G = 6.67*10**-11
dt = 60
t = 0

#Continue to run everything indented until the statement inside parenthesis
#is no longer true
while(t < 100000000):
    rate(50000)
    
    #Define the radius as a vector between the moon, pluto and Earth
    EMradius = moon.pos - earth.pos
    EMrhat = EMradius/EMradius.mag

    PMradius = pluto.pos - moon.pos
    PMrhat = PMradius/PMradius.mag

    EPradius = pluto.pos - earth.pos
    EPrhat = EPradius/EPradius.mag

    #Define the Force of Gravity they feel
    EMForce_Gravity = G*moon.mass*earth.mass/(EMradius.mag**2)* (-1*EMrhat)
    PMForce_Gravity = G*pluto.mass*moon.mass/(PMradius.mag**2)*(-1*PMrhat)
    EPForce_Gravity = G*earth.mass*pluto.mass/(EPradius.mag**2)*(-1*EPrhat)

    #Kinematic Equations defining acceleration, velocity, position
    earth.a = (-EMForce_Gravity - EPForce_Gravity)/earth.mass
    earth.v = earth.v + (earth.a)*dt
    earth.pos = earth.pos + earth.v*dt
    
    moon.a = (EMForce_Gravity - PMForce_Gravity )/moon.mass
    moon.v = moon.v + (moon.a)*dt
    moon.pos = moon.pos + moon.v*dt
    
    pluto.a = (PMForce_Gravity + EPForce_Gravity)/pluto.mass
    pluto.v = pluto.v + (pluto.a)*dt
    pluto.pos = pluto.pos + pluto.v*dt

    #Update curve showing where the bodies have been, advance time
    earthtrail.append(pos=earth.pos)
    plutotrail.append(pos=pluto.pos)
    moontrail.append(pos=moon.pos)
    t = t + dt
    
    #Print the momentum (p) and angular momentum (L) of the moon/earth system.
    if (t % 400000 == 0):
        print("p = ", moon.v*moon.mass + earth.v*earth.mass)
        print("L = ", cross(moon.pos,moon.v*moon.mass) + cross(earth.pos,earth.v*earth.mass))
